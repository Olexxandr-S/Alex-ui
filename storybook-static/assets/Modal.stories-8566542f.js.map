{"version":3,"file":"Modal.stories-8566542f.js","sources":["../../src/components/Modal/ModalPortal.tsx","../../src/components/Modal/Modal.tsx","../../src/components/Modal/ModalActions.tsx","../../src/components/Modal/ModalBody.tsx"],"sourcesContent":["import { FC, PropsWithChildren, useLayoutEffect, useRef, useState } from 'react';\r\nimport { createPortal } from 'react-dom';\r\n\r\nexport interface ModalPortalProps {\r\n    id: string;\r\n}\r\n\r\nexport const ModalPortal: FC<PropsWithChildren<ModalPortalProps>> = ({ id, children }) => {\r\n    const [root, setRoot] = useState<HTMLElement | null>(null);\r\n    const isCustomCreatedRef = useRef(false);\r\n\r\n    const createRootElement = (): HTMLDivElement => {\r\n        const rootElement = document.createElement('div');\r\n        rootElement.setAttribute('id', id);\r\n        document.body.appendChild(rootElement);\r\n        isCustomCreatedRef.current = true;\r\n        return rootElement;\r\n    };\r\n\r\n    useLayoutEffect(() => {\r\n        const rootElement = document.getElementById(id) || createRootElement();\r\n\r\n        setRoot(rootElement);\r\n\r\n        return () => {\r\n            if (isCustomCreatedRef.current && rootElement.parentNode) {\r\n                document.body.removeChild(rootElement);\r\n            }\r\n        };\r\n    }, [id]);\r\n\r\n    if (!root) return null;\r\n\r\n    return createPortal(children, root);\r\n};\r\n","import { FC, PropsWithChildren } from 'react';\r\nimport cx from 'clsx';\r\nimport { ModalPortal } from './ModalPortal';\r\nimport styles from './Modal.module.scss';\r\nimport { Button } from '../Button/Button';\r\nimport { CloseIcon } from '../Icons';\r\n\r\nexport interface ModalProps {\r\n    title?: string;\r\n    isOpen: boolean;\r\n    customId?: string;\r\n    className?: string;\r\n    onClose: () => void;\r\n}\r\n\r\nconst DEFAULT_MODAL_ID = 'notes-paw-modal-root';\r\n\r\nexport const Modal: FC<PropsWithChildren<ModalProps>> = ({ onClose, customId, className, isOpen, children }) => {\r\n    const classNames = cx(styles.modal, className);\r\n\r\n    return (\r\n        <ModalPortal id={customId || DEFAULT_MODAL_ID}>\r\n            {isOpen && (\r\n                <div className={styles.overlay}>\r\n                    <div className={classNames}>\r\n                        <div className={styles.header}>\r\n                            <Button\r\n                                scale=\"s\"\r\n                                color=\"secondary\"\r\n                                variant=\"icon\"\r\n                                className={styles.close}\r\n                                onClick={onClose}\r\n                            >\r\n                                <CloseIcon />\r\n                            </Button>\r\n                        </div>\r\n                        {children}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </ModalPortal>\r\n    );\r\n};\r\n","import { FC, PropsWithChildren } from 'react';\r\nimport cx from 'clsx';\r\nimport styles from './ModalActions.module.scss';\r\n\r\nexport interface ModalActions {\r\n    className?: string;\r\n    align?: 'left' | 'center' | 'right' | 'spaced';\r\n}\r\n\r\nexport const ModalActions: FC<PropsWithChildren<ModalActions>> = ({ className, children, align = 'right' }) => {\r\n    const classNames = cx(styles.actions, className, {\r\n        [styles[`align-${align}`]]: align,\r\n    });\r\n\r\n    return <div className={classNames}>{children}</div>;\r\n};\r\n","import { FC, PropsWithChildren } from 'react';\r\nimport cx from 'clsx';\r\nimport styles from './ModalBody.module.scss';\r\nimport { Card } from '../Card/Card';\r\n\r\nexport interface ModalBody {\r\n    className?: string;\r\n    flexDirection?: 'row' | 'column';\r\n}\r\n\r\nexport const ModalBody: FC<PropsWithChildren<ModalBody>> = ({ children, className, flexDirection }) => {\r\n    const classNames = cx(styles.body, styles.indentation, className);\r\n\r\n    return (\r\n        <Card wide className={classNames} flexDirection={flexDirection}>\r\n            {children}\r\n        </Card>\r\n    );\r\n};\r\n"],"names":["ModalPortal","__name","id","children","root","setRoot","useState","isCustomCreatedRef","useRef","createRootElement","rootElement","useLayoutEffect","createPortal","DEFAULT_MODAL_ID","Modal","onClose","customId","className","isOpen","classNames","cx","styles","jsx","jsxs","Button","CloseIcon","ModalActions","align","ModalBody","flexDirection","Card"],"mappings":"yaAOO,MAAAA,EAAAC,EAAA,CAAA,CAAA,GAAAC,EAAA,SAAAC,KAAA,CACH,KAAA,CAAAC,EAAAC,CAAA,EAAAC,EAAA,SAAA,IAAA,EACAC,EAAAC,SAAA,EAAA,EAEAC,EAAAR,EAAA,IAAA,CACI,MAAAS,EAAA,SAAA,cAAA,KAAA,EACA,OAAAA,EAAA,aAAA,KAAAR,CAAA,EACA,SAAA,KAAA,YAAAQ,CAAA,EACAH,EAAA,QAAA,GACAG,CAAO,EALX,qBAoBA,OAZAC,EAAAA,gBAAA,IAAA,CACI,MAAAD,EAAA,SAAA,eAAAR,CAAA,GAAAO,EAAA,EAEA,OAAAJ,EAAAK,CAAA,EAEA,IAAA,CACIH,EAAA,SAAAG,EAAA,YACI,SAAA,KAAA,YAAAA,CAAA,CACJ,CACJ,EAAA,CAAAR,CAAA,CAAA,EAGJE,EAEAQ,EAAA,aAAAT,EAAAC,CAAA,EAFW,IAGf,EA3BO,wUCQPS,EAAA,uBAEOC,EAAAb,EAAA,CAAA,CAAA,QAAAc,EAAA,SAAAC,EAAA,UAAAC,EAAA,OAAAC,EAAA,SAAAf,KAAA,CACH,MAAAgB,EAAAC,EAAAC,EAAA,MAAAJ,CAAA,EAEA,OAAAK,EAAA,IAAAtB,EAAA,CAAA,GAAAgB,GAAAH,EAAA,SAAAK,GAAAI,MAAA,MAAA,CAAA,UAAAD,EAAA,QAAA,SAAAE,EAAAA,KAAA,MAAA,CAAA,UAAAJ,EAAA,SAAA,CAKoBG,EAAA,IAAA,MAAA,CAAA,UAAAD,EAAA,OAAA,SAAAC,EAAA,IACIE,EAAC,CAAA,MAAA,IACS,MAAA,YACA,QAAA,OACE,UAAAH,EAAA,MACU,QAAAN,EACT,SAAAO,EAAAA,IAAAG,EAAA,EAAA,CAEE,CAAA,EAAA,EAEnBtB,CACC,EAAA,CAAA,CAAA,CAAA,CAAA,CAMzB,EAzBO,ovBCRAuB,EAAAzB,EAAA,CAAA,CAAA,UAAAgB,EAAA,SAAAd,EAAA,MAAAwB,EAAA,OAAA,IAAA,CACH,MAAAR,EAAAC,EAAAC,EAAA,QAAAJ,EAAA,CAAiD,CAAAI,EAAA,SAAAM,GAAA,CAAA,EAAAA,CACjB,CAAA,EAGhC,OAAAL,EAAAA,IAAA,MAAA,CAAA,UAAAH,EAAA,SAAAhB,CAAA,CAAA,CACJ,EANO,qdCCAyB,EAAA3B,EAAA,CAAA,CAAA,SAAAE,EAAA,UAAAc,EAAA,cAAAY,CAAA,IAAA,CACH,MAAAV,EAAAC,EAAAC,EAAA,KAAAA,EAAA,YAAAJ,CAAA,EAEA,OAAAK,EAAA,IAAAQ,EAAA,CAAA,KAAA,GAAA,UAAAX,EAAA,cAAAU,EAAA,SAAA1B,CAAA,CAAA,CAKJ,EARO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}